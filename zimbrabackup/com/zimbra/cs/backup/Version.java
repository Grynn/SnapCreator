// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Version.java

package com.zimbra.cs.backup;

import com.zimbra.common.service.ServiceException;
import com.zimbra.common.util.Pair;
import com.zimbra.cs.db.Versions;
import java.io.*;
import org.apache.commons.cli.*;

public class Version
{

    public Version()
    {
    }

    public static String current()
    {
        return (new StringBuilder()).append(Integer.toString(7)).append(".").append(Integer.toString(1)).toString();
    }

    public static Pair parseVersion(String version)
        throws ServiceException
    {
        if(version != null)
            try
            {
                int major = 0;
                int minor = 0;
                int len = version.length();
                int dot = version.indexOf(".");
                if(dot != -1)
                {
                    String majorStr = version.substring(0, dot);
                    String minorStr = version.substring(dot + 1, len);
                    major = Integer.parseInt(majorStr);
                    minor = Integer.parseInt(minorStr);
                } else
                {
                    major = Integer.parseInt(version);
                }
                return new Pair(Integer.valueOf(major), Integer.valueOf(minor));
            }
            catch(IndexOutOfBoundsException e)
            {
                throw ServiceException.FAILURE((new StringBuilder()).append("Invalid backup version ").append(version).toString(), e);
            }
            catch(NumberFormatException e)
            {
                throw ServiceException.FAILURE((new StringBuilder()).append("Invalid backup version ").append(version).toString(), e);
            }
        else
            throw ServiceException.FAILURE("Invalid null backup version", null);
    }

    public static void usage(Options options)
    {
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp(com/zimbra/cs/db/Versions.getName(), options);
        System.exit(1);
    }

    private static CommandLine parseCmdlineArgs(String args[], Options options)
    {
        CommandLineParser parser = new GnuParser();
        options.addOption("h", "help", false, "print usage");
        options.addOption("o", "outputdir", true, "output directory for version.sql");
        CommandLine cl = null;
        boolean err = false;
        try
        {
            cl = parser.parse(options, args);
        }
        catch(ParseException pe)
        {
            System.err.println((new StringBuilder()).append("error: ").append(pe.getMessage()).toString());
            err = true;
        }
        if(err || cl.hasOption("h"))
            usage(options);
        return cl;
    }

    public static void main(String args[])
    {
        Options options = new Options();
        CommandLine cl = parseCmdlineArgs(args, options);
        String outputDir = cl.getOptionValue("o");
        File outFile = new File(outputDir, "backup-version-init.sql");
        outFile.delete();
        Writer output = null;
        try
        {
            output = new BufferedWriter(new FileWriter(outFile));
            String name = "backup.version";
            String value = current();
            String outStr = (new StringBuilder()).append("# AUTO-GENERATED .SQL FILE - Generated by the Backup Version tool\nuse zimbra;\nINSERT INTO zimbra.config (name, value, description) VALUES\n\t('").append(name).append("', '").append(value).append("', 'backup version')\n").append("\tON DUPLICATE KEY UPDATE name='").append(name).append("';\n").append("COMMIT;\n").toString();
            output.write(outStr);
            if(output != null)
                output.close();
        }
        catch(IOException e)
        {
            System.out.println("ERROR - caught exception at\n");
            e.printStackTrace();
            System.exit(-1);
        }
    }
}
